<?php

/**
 * @file
 * Access Google Drive module enables access to specific files in Google Drive.
 * @author Prasanth Sukhapalli (prashanthnetizen@gmail.com)
 * @copyright 2019
 */

/**
 * Implements hook_help().
 */
function access_gdrive_help($path, $arg) {
  switch ($path) {
    case "admin/help#access_gdrive":
      return t("Module to provide permissions to Google Drive Files while submitting webforms.");
  }
}

/**
 * Implements hook_menu().
 */
function access_gdrive_menu() {
  $items = array();
  $items['node/%webform_menu/webform/access_gdrive'] = array(
    'title' => 'GDrive File Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_gdrive_edit_form', 1),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/access_gdrive.fileset.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/access_gdrive'] = array(
    'title' => 'GDrive Access Admin Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_gdrive_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/access_gdrive.fileset.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function access_gdrive_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']->nid) && $form_id == 'webform_client_form_' . $form['#node']->nid) {
    array_push($form['#submit'], 'access_gdrive_webform_submit');
  }
}

/**
 * Implements hook_gdrive_webform_submit().
 */
function access_gdrive_webform_submit($form, &$form_state) {
  include_once drupal_get_path('module', 'access_gdrive') . '/access_gdrive.class.inc';
  try {
    $config_details = db_query("SELECT * FROM {access_gdrive}")->fetchAssoc();
    $node_details = db_query("SELECT * FROM {access_gdrive_files} WHERE nid = :nid", array(":nid" => $form['#node']->nid))->fetchAssoc();
    if (empty($node_details) || empty($config_details) || $node_details['enable_access'] == 0) {
      return;
    }
    $email = $form_state['values']['submitted'][$node_details['cid']];
    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
      return;
    }
    $files = explode(",", $node_details['file_ids']);
    $obj = new DriveClient($config_details['app_name'], access_gdrive_hash('decrypt', $config_details['credentials']), access_gdrive_hash('decrypt', $config_details['access_token']));
    foreach ($files as $file) {
      $status = $obj->provideFilePermission($file, $email, 'user', 'reader');
    }
    $rows_updated = db_update('access_gdrive')->fields(array(
      'access_token' => json_encode($obj->getToken()),
    ))->execute();
  }
  catch (Exception $ex) {
    watchdog_exception('Access Google Drive', $ex, $ex->getMessage());
  }

}

/**
 * Encrypt/ Decrypt function for storing sensitive data.
 *
 * @param string $action
 *   The Sensitive String Data to encrypt or decrypt.
 * @param string $string
 *   Encrypt or Decrypt.
 *
 * @return bool|string
 *   Returns encrypted or decrypted string
 */
function access_gdrive_hash($action, $string) {
  $method = 'AES-256-CBC';
  $key = hash('sha256', drupal_get_hash_salt());
  // Encrypt method (AES-256-CBC) expects 16 bytes, else you'll get a warning.
  $iv = substr(hash('sha256', variable_get('access_gdrive_key', '')), 0, 16);

  switch ($action) {
    case 'encrypt':
      return base64_encode(openssl_encrypt($string, $method, $key, 0, $iv));

    case 'decrypt':
      return openssl_decrypt(base64_decode($string), $method, $key, 0, $iv);
  }

  return FALSE;
}
